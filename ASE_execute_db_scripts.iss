; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "EOD"
#define MyAppVersion "43.3"
#define MyAppPublisher "Ergo Soluciones, SRL"
#define MyAppURL "http://www.ergosoluciones.com/"
#define MyAppExeName "universe_eod.exe"
#define ISQLPath "C:\SAP\OCS-16_0\bin\"

[Setup]
AppID=DBUpdateTest
AppName=Test
AppVersion=0.1
;AppVerName=Test 0.1
AppPublisher=My Company, Inc.
DefaultDirName={pf}\Test
DefaultGroupName=Test
DisableDirPage=yes
DisableProgramGroupPage=yes
OutputBaseFilename=setup
PrivilegesRequired=none
ArchitecturesInstallIn64BitMode=x64

[Files]
Source: "C:\SAP\OCS-16_0\bin\isql64.exe"; DestDir: "{tmp}"; Flags: dontcopy
Source: "Scripts\*.sql"; DestDir: "{tmp}"; Flags: dontcopy; Attribs: readonly

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Code]
var
  DBPage: TInputQueryWizardPage;

procedure InitializeWizard;
begin
  DBPage := CreateInputQueryPage(wpReady,
    'Database Connection Information', 'Which database is to be updated?',
    'Please specify the server and the connection credentials, then click Next.');
  DBPage.Add('Server:', False);
  DBPage.Add('Port:', False);
  DBPage.Add('User name:', False);
  DBPage.Add('Password:', True);
  DBPage.Add('Database:', False);

  DBPage.Values[0] := GetPreviousData('Server', '');
  DBPage.Values[1] := GetPreviousData('Port', '');
  DBPage.Values[2] := GetPreviousData('UserName', '');
  DBPage.Values[3] := GetPreviousData('Password', '');
  DBPage.Values[4] := GetPreviousData('Database', '');
end;

procedure RegisterPreviousData(PreviousDataKey: Integer);
begin
  SetPreviousData(PreviousDataKey, 'Server', DBPage.Values[0]);
  SetPreviousData(PreviousDataKey, 'Port', DBPage.Values[1]);
  SetPreviousData(PreviousDataKey, 'UserName', DBPage.Values[2]);
  SetPreviousData(PreviousDataKey, 'Password', DBPage.Values[3]);
  SetPreviousData(PreviousDataKey, 'Database', DBPage.Values[4]);
end;

function NextButtonClick(CurPageID: Integer): Boolean;
var
  ResultCode: Integer;
  intSQLFiles: Integer;
  strExternalCommand: String;
  cstrDefaultDatabase: String;
  FilesFound: Integer;
  FindRec: TFindRec;
begin
  Result              := True;
  cstrDefaultDatabase := 'fu';

  if CurPageID = DBPage.ID then begin
    if DBPage.Values[0] = '' then begin
      MsgBox('You must enter the server name or address.', mbError, MB_OK);
      Result := False;
    end else if DBPage.Values[2] = '' then begin
      MsgBox('You must enter the user name.', mbError, MB_OK);
      Result := False;
    end else if DBPage.Values[3] = '' then begin
      MsgBox('You must enter the user password.', mbError, MB_OK);
      Result := False;
    end else begin
      if DBPage.Values[4] = '' then DBPage.Values[4] := cstrDefaultDatabase;
      
       ExtractTemporaryFile('isql64.exe');
       intSQLFiles := ExtractTemporaryFiles('*.sql');

      FilesFound := 0;
      if FindFirst(ExpandConstant('{tmp}\*.sql'), FindRec) then begin
        try
          repeat
            if FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY = 0 then
              FilesFound := FilesFound + 1;

              strExternalCommand := '-S' + DBPage.Values[0] + ':' + DBPage.Values[1] + ' -U' + DBPage.Values[2] + ' -P' 
                + DBPage.Values[3] + ' -D' + DBPage.Values[4] + ' -i' + ExpandConstant('{tmp}\') + 
                FindRec.Name + ' -o' + ExpandConstant('{userdocs}') + '\' + FindRec.Name + '.log'

              //MsgBox(strExternalCommand, mbInformation, MB_OK);

              if Exec(ExpandConstant('{tmp}') + '\isql64.exe', strExternalCommand, '',
                SW_HIDE, ewWaitUntilTerminated, ResultCode)
              then begin
                //MsgBox('Database sucesfully updated:'#10#10 + SysErrorMessage(ResultCode), mbInformation, MB_OK);
                // check ResultCode and set Result accordingly
                Result := ResultCode = 0; 
              end 
              else begin

                MsgBox('Database update failed:'#10#10 + SysErrorMessage(ResultCode),
                  mbError, MB_OK);
                Result := False;
              end;

        until not FindNext(FindRec);
        finally
          FindClose(FindRec);
        end;
      end;
      if FilesFound <> intSQLFiles then
      MsgBox(IntToStr(FilesFound) + ' file(s) found in the System directory, ' +
         IntToStr(intSQLFiles) + ' file(s) decompressed in Temp directory.' ,
        mbInformation, MB_OK);
    end;
  end;
end;
